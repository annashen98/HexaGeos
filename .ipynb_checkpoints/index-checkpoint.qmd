---
title: 'Spatiotemporal Monitoring of Lake Cyanobacterial Blooms: A Case Study of Chaohu Lake'
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.4
  kernelspec:
    display_name: Python (base)
    language: python
    name: base
---

### 3.1 Data Processing

In this part, the code below defines Chaohu Lake's rectangular study area, centers the map on it, filters Sentinel-2 images within a specific date range and cloud cover threshold, and creates a composite image for analysis.

```js
// define study area - Chaohu Lake
var chaohu = ee.Geometry.Polygon(
  [[[117.220, 31.799],
    [117.220, 31.387],
    [117.937, 31.387],
    [117.937, 31.799]]]);


// set the center
Map.centerObject(chaohu, 10);

////////////////import data////////////////

// set time range
var startDate = '2025-04-01';
var endDate = '2025-04-19';

// import Sentinel-2 data and filter
var s2 = ee.ImageCollection('COPERNICUS/S2')
  .filterBounds(chaohu)
  .filterDate(startDate, endDate)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
  
var compositeImage = s2.mosaic(); //Synthesize images within the same time period
```

### 3.2 Data Calculating
Firstly, we need to identify water bodies in Chaohu Lake by calculating the Modified Normalized Difference Water Index(MNDWI), applying a threshold to create a water mask, and then vectorizing the water areas. 

It filters out small water bodies, retaining larger regions for further analysis. The boundaries of the remaining water features are buffered inward by 20 meters to eliminate edge effects and improve accuracy in the water delineation. 
This approach is designed to accurately define the lake's water boundaries for environmental monitoring.

```js
// calculate MNDWI

var mndwi = compositeImage.normalizedDifference(['B3', 'B11']).rename('MNDWI');

// set MNDWI threhold
var waterMask = mndwi.gt(0.1).selfMask(); // MNDWI > 0.1 represents water

// Convert the water mask into a vector
var waterVector = waterMask.clip(chaohu).reduceToVectors({
  geometryType: 'polygon',
  reducer: ee.Reducer.countEvery(),
  scale: 30,
  maxPixels: 10e6, 
  bestEffort: true   
});

// filter water area less than the threshold (unit: square meters)
var minArea = 1000000; 

var filteredWater = waterVector.filter(ee.Filter.gte('count', minArea)); 


// Extract the water body boundaries and buffer inward by 20 meters to remove the influence of the water-land interface
var bufferedWaterOutline = filteredWater.map(function(feature) {
  var geometry = feature.geometry();
  var bufferedGeometry = geometry.buffer(-20); 
  return ee.Feature(bufferedGeometry);
});

// Visualize the lake boundary
Map.addLayer(bufferedWaterOutline, {
  color: 'blue',        
  fillColor: '00000000',
  width: 2
}, 'Chaohu Lake Outline');

// Create water mask image for subsequent processing
var waterMaskImage = ee.Image().byte().paint({
  featureCollection: filteredWater,
  color: 1
}).clip(chaohu);
```

```{python}
Secondly, we calculate Floating Algae Index (FAI) and Turbidity Index (TI). FAI is used to identify cyanobacterial blooms. The formulas are as follow:
$$ \text{FAI} = \rho_{\text{nir}} - \rho'_{\text{nir}} $$
$$ \rho'_{\text{nir}} = \rho_{\text{red}} + \left( \rho_{\text{swir}} - \rho_{\text{red}} \right) \times \frac{833 - 664.5}{1613.7 - 664.5} $$

TI is used to rule out the effects of high turbidity waters on cyanobacterial blooms. The formulas are as follow:
$$
TI = \rho_{red} - \rho_{green} - \left( \frac{\rho_{nir} - \rho_{green}}{2} \right)
$$
```

````{python}
```js
var calculateIndices = function(image) {
  // import bands: B3, B4, B8, B11
  var green = image.select('B3'); // 560 nm
  var red = image.select('B4'); // 664 nm
  var nir = image.select('B8'); // 833 nm
  var swir = image.select('B11'); // 1613 nm
  
  // calculate ρ'nir
  var nirPrime = red.add(
    swir.subtract(red).multiply((833 - 664.5) / (1613.7 - 664.5))
  );
  
  // calculate FAI
  var fai = nir.subtract(nirPrime).rename('FAI');
    
  // calculate TI
  var ti = red.subtract(green).subtract(
    nir.subtract(green).multiply(0.5)
  ).rename('TI');
  
  // add indices as new bands
  return image.addBands(fai).addBands(ti).clip(bufferedWaterOutline);
};

// process all images
var s2WithIndices = s2.map(calculateIndices);

// check image availability
var imageCount = s2WithIndices.size();
print('Number of images is:', imageCount);

if (imageCount.gt(0)) {
  // calculate average value of FAI and TI
  var FAIMean = s2WithFAI.select('FAI').mean();
  var TIMean = s2WithIndices.select('TI').mean();
    
  // visualization parameters
  var faiVisParams = {min: -0.1, max: -0.004, palette: ['blue', 'white', 'red']};
  var tiVisParams = {min: -0.1, max: 0.1, palette: ['blue', 'white', 'brown']};
  
  // add index layers to map
  Map.addLayer(FAIMean, faiVisParams, 'Mean FAI');
  Map.addLayer(TIMean, tiVisParams, 'Mean Turbidity Index');
}
```
````

We sequentially apply quality masks to filter clouds (B4 > 0.2), atmospheric effects (I1/I2 indices), and turbid waters (TI > 0). Valid water pixels are then analyzed for blooms using the FAI threshold (> -0.004). Results are stored in a new `algae` band appended to each processed image.

```js
var processAlgaeDetection = function(image) {
  // select required bands
  var b1 = image.select('B1'); // 442 nm
  var b4 = image.select('B4'); // 664 nm
  var b5 = image.select('B5'); // 704 nm
  var b7 = image.select('B7'); // 782 nm
  
  // cloud masking (B4 > 0.2)
  var cloudMask = b4.lt(0.2); 
  
  // calculate thin cloud and shadow indices: I1 and I2
  var I1 = b1.subtract(b7).divide(b1.add(b7)).rename('I1'); // (B1 - B7)/(B1 + B7)
  var I2 = b5.subtract(b4).divide(b5.add(b7)).rename('I2'); // (B5 - B4)/(B5 + B7)
  
  // apply thin cloud/shadow filters (I1>0.08 and I2<0.1)
  var thinCloudShadowMask = I1.gt(0.08).and(I2.lt(0.1)).not(); 
  
  // turbidity masking (TI > 0)
  var ti = image.select('TI');
  var turbidityMask = ti.lte(0); 
  
  
  // bloom detection (FAI > -0.004)
  var fai = image.select('FAI');
  var algaeMask = fai.gt(-0.004); 
  
  // combine all masks
  var finalMask = cloudMask.and(thinCloudShadowMask).and(turbidityMask).and(waterMaskImage);
  
  // apply masks and identify bloom areas
  var algaeArea = algaeMask.updateMask(finalMask).selfMask();
  
  // add bloom detection as new band
  return image.addBands(algaeArea.rename('algae'));
};

// process all images for bloom detection
var s2WithAlgae = s2WithIndices.map(processAlgaeDetection);

```

### References
[1]Brooks, B.W., Lazorchak, J.M., Howard, M.D., Johnson, M.V.V., Morton, S.L., Perkins, D.A., Reavie, E.D., Scott, G.I., Smith, S.A. and Steevens, J.A., 2016. Are harmful algal blooms becoming the greatest inland water quality threat to public health and aquatic ecosystems?. Environmental toxicology and chemistry, 35(1), pp.6-13.

[2]Jing, Y., Zhang, Y., Hu, M., Chu, Q. and Ma, R., 2019. MODIS-satellite-based analysis of long-term temporal-spatial dynamics and drivers of algal blooms in a plateau lake Dianchi, China. Remote Sensing, 11(21), p.2582.

[3]Guo, H., Liu, H., Lyu, H., Bian, Y., Zhong, S., Li, Y., Miao, S., Yang, Z., Xu, J., Cao, J. and Li, Y., 2022. Is there any difference on cyanobacterial blooms patterns between Lake Chaohu and Lake Taihu over the last 20 years?. Environmental Science and Pollution Research, 29(27), pp.40941-40953.

[4]Song, T., Xu, C., Yan, F. & Zhang, J. (2025) 'Spatiotemporal Monitoring of Lake Cyanobacterial Blooms Based on Sentinel-2 Data', China Environmental Monitoring, 41(1), pp. 214–224
[5]Hu, C., 2009. A novel ocean color index to detect floating algae in the global oceans. Remote Sensing of Environment, 113(10), pp.2118-2129.
