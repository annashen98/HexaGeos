---
title: 'Spatiotemporal Monitoring of Lake Cyanobacterial Blooms: A Case Study of Chaohu Lake'
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.16.4
  kernelspec:
    display_name: Python (base)
    language: python
    name: base
---


## Project Summary 

Harmful algal blooms (HABs), particularly cyanobacterial blooms (CBs), are among the most critical environmental issues facing inland water bodies. These blooms pose significant threats to global public health and aquatic ecosystem stability. Chaohu Lake, the fifth-largest freshwater lake in China, faces severe eutrophication and frequent CBs due to agricultural runoff, industrial, and domestic pollution. 

Remote sensing technology enables real-time detection and long-term monitoring of CBs. This study focuses on Chaohu Lake as a case study, aiming to quantify and visualize the occurrence of CBs in the region over the past decade, providing insights into the impact of human activities on water quality and ecosystem health.

### Problem Statement 

This application addresses two key research questions: 

1. What is the spatial distribution of cyanobacterial blooms (CBs) in Chaohu Lake? 

2. What temporal patterns characterize the occurrence of CBs in Chaohu Lake? 

By leveraging remote sensing technology and indices, the application provides a cost-effective, real-time solution for quantifying and visualizing CB occurrences, enabling a deeper understanding of their spatial and temporal dynamics to inform management strategies.

### End User 

This application is designed to serve environmental researchers, policymakers, local authorities, and residents in the Chaohu Lake region.

For researchers, it provides real-time monitoring of cyanobacterial blooms (CBs), offering insights into their spatial distribution and temporal patterns, which are essential for scientific analysis and environmental management.

For policymakers and local authorities, the tool enables data-driven decision-making to implement effective mitigation strategies, allocate resources efficiently, and establish long-term action plans to address water quality challenges.

For residents, the application raises awareness about water quality issues and associated health risks, empowering communities to take measures and engage in sustainability efforts. 

### Data

This application uses Sentinel-2 MSI imagery from the Google Earth Engine platform. The image collection spans from 2018 to 2020 and is filtered for cloud coverage under 20%. Additionally, vegetation and water indices such as MNDWI, FAI, and TI are derived for analysis.

### Methodology

We use median composites and custom cloud masking for preprocessing. Water bodies are extracted using MNDWI, and bloom areas are identified by combining FAI and TI thresholds. We calculate bloom area statistics, classify bloom severity, and compute the Spatial Distribution Frequency Index (SDFI) for spatial analysis.

### Interface

How does your application's interface work to address the needs of your end user?

## The Application 

Replace the link below with the link to your application.

:::{.column-page}

<iframe src='https://ollielballinger.users.earthengine.app/view/turkey-earthquake' width='100%' height='700px'></iframe>

:::
## How it Works 

### 3.1 Data Processing

In this part, the code below defines Chaohu Lake's rectangular study area, centers the map on it, filters Sentinel-2 images within a specific date range and cloud cover threshold, and creates a composite image for analysis.

```js
// define study area - Chaohu Lake
var chaohu = ee.Geometry.Polygon(
  [[[117.220, 31.799],
    [117.220, 31.387],
    [117.937, 31.387],
    [117.937, 31.799]]]);


// set the center
Map.centerObject(chaohu, 10);

////////////////import data////////////////

// set time range
var startDate = '2018-05-01';
var endDate = '2018-11-01';

// import Sentinel-2 data and filter
var s2 = ee.ImageCollection('COPERNICUS/S2')
  .filterBounds(chaohu)
  .filterDate(startDate, endDate)
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 20))
  
var compositeImage = s2.mosaic(); //Synthesize images within the same time period
```
### 3.2 遥感指数介绍
为了有效识别蓝藻水华，我们计算并应用了三种关键遥感指数：
1. Modified Normalized Difference Water Index (MNDWI)
它用于区分水体与陆地，计算公式如下：
$$
\text{MNDWI} = \frac{\rho_{\text{green}} - \rho_{\text{swir}}}{\rho_{\text{green}} + \rho_{\text{swir}}}
$$
其中：$\rho_{\text{Green}}$ 为绿波段（B3）反射率，$\rho_{\text{SWIR}}$ 为短波红外波段（B11）反射率。
```js
// 计算 MNDWI
var mndwi = medianComposite.normalizedDifference(['B3', 'B11']).rename('MNDWI');
```

2. Floating Algae Index (FAI)
FAI专门用于检测蓝藻水华，计算公式如下：
$$
\text{FAI} = \rho_{\text{nir}} - \rho_{\text{nir}}'
$$
其中$\rho'_{\text{NIR}}$是近红外波段的基线反射率，公式如下：
$$
\rho_{\text{nir}}' = \rho_{\text{red}} + (\rho_{\text{swir}} - \rho_{\text{red}}) \times \frac{\lambda_{\text{nir}} - \lambda_{\text{red}}}{\lambda_{\text{swir}} - \lambda_{\text{red}}}
$$

```js
// 计算FAI
var nirPrime = red.add(
  swir.subtract(red).multiply((833 - 664.5) / (1613.7 - 664.5))
);
var fai = nir.subtract(nirPrime).rename('FAI');
```
3. 浊度指数（TI）
采用TI来排除高浊度水体对蓝藻水华的影响，公式如下：
$$
TI = \rho_{red} - \rho_{green} - \left( \frac{\rho_{nir} - \rho_{green}}{2} \right)
$$
```js
// 计算 TI
var ti = red.subtract(green).subtract(
  nir.subtract(green.multiply(0.5))
).rename('TI');
```
完整的指数计算函数：
```js
function calculateIndices(image) {
  // 归一化反射率
  var green = image.select('B3').divide(10000);
  var red = image.select('B4').divide(10000);
  var nir = image.select('B8').divide(10000);
  var swir = image.select('B11').divide(10000);
  
  // 计算FAI
  var nirPrime = red.add(swir.subtract(red).multiply((833 - 664.5) / (1613.7 - 664.5)));
  var fai = nir.subtract(nirPrime).rename('FAI');
  
  // 计算TI
  var ti = red.subtract(green).subtract(nir.subtract(green.multiply(0.5))).rename('TI');
  
  // 添加波段并应用水体掩膜
  return image.addBands(fai).addBands(ti).updateMask(waterMaskImage);
}

```
### 3.3 云掩膜处理
云层在可见光-近红外波段的反射特性与蓝藻水华相似，会导致FAI值较高出现假阳性，因此需要进行去云操作。
云掩膜处理使用了两种特殊的光谱指数：
$I_1 = \frac{B1 - B7}{B1 + B7}$，当值 > 0.08 时通常表示薄云
$I_2 = \frac{B5 - B4}{B5 + B7}$，当值 < 0.1 且I₁值较高时，可帮助识别薄云特征
首先，利用红波段（B4）反射率高于0.2的特性检测厚云区域；其次，通过气溶胶波段（B1）与红边3波段（B7）的比值指数（I1）及红边1波段（B5）与红波段的比值指数（I2）识别薄云和阴影，设定I1>0.08且I2<0.1的条件来剔除这些干扰像元；最后，将厚云和薄云检测结果结合，生成综合云掩膜，仅保留无云像元供后续分析。
```js
function maskCloud(image) {
  // 归一化反射率
  var b1 = image.select('B1').divide(10000); // 气溶胶 (442 nm)
  var b4 = image.select('B4').divide(10000); // 红波段 (664 nm)
  var b5 = image.select('B5').divide(10000); // 红边1 (704 nm)
  var b7 = image.select('B7').divide(10000); // 红边3 (782 nm)
  
  // 基础云掩膜（B4 > 0.2）
  var cloudMask = b4.lt(0.2);
  
  // 薄云/阴影剔除
  var I1 = b1.subtract(b7).divide(b1.add(b7)); // (B1-B7)/(B1+B7)
  var I2 = b5.subtract(b4).divide(b5.add(b7)); // (B5-B4)/(B5+B7)
  var thinCloudMask = I1.gt(0.08).and(I2.lt(0.1)).not();
  
  // 综合云掩膜
  return image.updateMask(cloudMask.and(thinCloudMask));
}
```

### 3.4高浊度水体掩膜
高浊度水体（如含大量泥沙或悬浮物）在光学特性上与蓝藻水华存在相似性，也可能导致假阳性误判。因此为了排除高浊度水体对蓝藻水华的影响，我们利用浊度指数（TI）进行掩膜处理。
```js
// 浊度掩膜（TI > 0）
  var ti = red.subtract(green).subtract(
    nir.subtract(green).multiply(0.5)
  ).rename('TI');
```
我们使用TI > 0作为蓝藻水华的判别条件之一，这有助于排除非藻类引起的高浊度水体的干扰。完整的处理流程如下：
```js
// 设置 MNDWI 阈值，生成水体掩膜
var waterMask = mndwi.gt(0.1).selfMask(); // MNDWI > 0.1 表示水体

// 将水体掩膜转换为矢量
var waterVector = waterMask.clip(chaohu).reduceToVectors({
  geometryType: 'polygon',
  reducer: ee.Reducer.countEvery(),
  scale: 30,
  maxPixels: 10e6,
  bestEffort: true
});

// 过滤面积小于阈值的水体（单位：平方米）
var minArea = 1000000; // 保留面积大于1,000,000平方米的水域
var filteredWater = waterVector.filter(ee.Filter.gte('count', minArea));

// 提取水体的边界并向内缓冲 20 米，去除水路交界地影响
var bufferedWaterOutline = filteredWater.map(function(feature) {
  return feature.buffer(-20); // 向内缓冲 20 米
});

// 创建水体掩膜图像用于后续处理
var waterMaskImage = ee.Image().byte().paint({
  featureCollection: filteredWater,
  color: 1
}).clip(chaohu);

```
通过这一系列掩膜处理，我们可以有效地排除云、薄云、阴影以及高浊度水体的干扰，从而提高蓝藻水华检测的准确性。也就是说当一个像元同时满足 FAI > -0.004和 TI ≤ 0时，标记为蓝藻水华；
```js
function detectAlgae(image) {
  // 获取FAI和TI波段
  var fai = image.select('FAI');
  var ti = image.select('TI');
  
  // 蓝藻水华条件：FAI > -0.004 且 TI ≤ 0
  var algaeMask = fai.gt(-0.004).and(ti.lte(0));
  
  return image.addBands(algaeMask.rename('algae'));
}

var s2WithAlgae = s2WithIndices.map(detectAlgae);
```
### 3.5 时间与空间分析（SDFI）

我们使用每日水华面积计算来进行时间分析，时间序列图表可以帮助我们分析水华季节规律（如夏季高发）或年际趋势（如治理效果评估）。
```js
// 计算每日蓝藻水华面积
function calculateDailyBloomArea(image) {
  var bloom = image.select('algae');
  var area = bloom.multiply(ee.Image.pixelArea()).rename('bloom_area');
  var date = image.date().format('YYYY-MM-dd');
  
  return ee.Feature(null, {
    'date': date,
    'bloom_area': area,
    'system:time_start': image.get('system:time_start')
  });
}
var dailyStats = s2WithAlgae.map(calculateDailyBloomArea);
```
为了量化蓝藻水华的时空动态特征，我们引入了空间分布频率指数（SDFI）指标来进行空间分析。
$$
\text{SDFI} = \frac{\sum_{i=1}^{n} R_{i,\text{bloom}}}{\sum_{i=1}^{n} R_{i,\text{bloom}} + \sum_{i=1}^{n} R_{i,\text{water}}} \times 100\%
$$
SDFI是用来衡量某一地理位置上蓝藻水华发生频率的指标。它描述了在监测时间段内，一个像元上出现蓝藻水华的次数占总观测次数的百分比，本质上反映了蓝藻水华的易发性。
```js
// 计算SDFI
var bloomCollection = s2WithAlgae.select('algae');
var bloomSum = bloomCollection.sum();
var validCount = bloomCollection.count();
var sdfi = bloomSum.divide(validCount).multiply(100).rename('SDFI');
```
根据SDFI的结果，我们可以识别高频水华区域，针对高频区加强治理。

### 3.6 水华分级
基于FAI值和红波段反射率，建立了蓝藻水华的分级系统将水华划分为5个等级（VCI_Lv2至VCI_Lv6），从而量化藻类聚集密度和生态风险。
```js
function classifyBloom(image) {
  var fai = image.select('FAI');
  var red = image.select('B4').divide(10000);
  
  // 分级标准
  var lv2 = fai.gte(-0.004).and(fai.lt(0.1));    
  var lv3 = fai.gte(0.1).and(fai.lt(0.15));      
  var lv4 = fai.gte(0.15).and(fai.lt(0.2));      
  var lv5 = fai.gte(0.2).and(red.lt(0.07));      
  var lv6 = fai.gte(0.2).and(red.gte(0.07));     
  
  return image
    .addBands(lv2.rename('VCI_Lv2'))
    .addBands(lv3.rename('VCI_Lv3'))
    .addBands(lv4.rename('VCI_Lv4'))
    .addBands(lv5.rename('VCI_Lv5'))
    .addBands(lv6.rename('VCI_Lv6'));
}
var classified = s2WithAlgae.map(classifyBloom);
```

### References
[1]Brooks, B.W., Lazorchak, J.M., Howard, M.D., Johnson, M.V.V., Morton, S.L., Perkins, D.A., Reavie, E.D., Scott, G.I., Smith, S.A. and Steevens, J.A., 2016. Are harmful algal blooms becoming the greatest inland water quality threat to public health and aquatic ecosystems?. Environmental toxicology and chemistry, 35(1), pp.6-13.

[2]Jing, Y., Zhang, Y., Hu, M., Chu, Q. and Ma, R., 2019. MODIS-satellite-based analysis of long-term temporal-spatial dynamics and drivers of algal blooms in a plateau lake Dianchi, China. Remote Sensing, 11(21), p.2582.

[3]Guo, H., Liu, H., Lyu, H., Bian, Y., Zhong, S., Li, Y., Miao, S., Yang, Z., Xu, J., Cao, J. and Li, Y., 2022. Is there any difference on cyanobacterial blooms patterns between Lake Chaohu and Lake Taihu over the last 20 years?. Environmental Science and Pollution Research, 29(27), pp.40941-40953.

[4]Song, T., Xu, C., Yan, F. & Zhang, J. (2025) 'Spatiotemporal Monitoring of Lake Cyanobacterial Blooms Based on Sentinel-2 Data', China Environmental Monitoring, 41(1), pp. 214–224
[5]Hu, C., 2009. A novel ocean color index to detect floating algae in the global oceans. Remote Sensing of Environment, 113(10), pp.2118-2129.

